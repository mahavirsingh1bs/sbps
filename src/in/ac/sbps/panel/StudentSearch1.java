/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package in.ac.sbps.panel;

import in.ac.sbps.dao.StudentDAO;
import in.ac.sbps.domain.Student;
import in.ac.sbps.service.StudentService;
import in.ac.sbps.util.BeanResolverUtil;
import java.util.List;
import javax.swing.table.AbstractTableModel;


/**
 *
 * @author mahavir.singh
 */
public class StudentSearch1 extends javax.swing.JPanel {
    
    /**
     * Creates new form StudentSearch
     */
    public StudentSearch1() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        studentTable1 = new javax.swing.JTable();

        studentTable1.setModel(		new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Father Name", "Class", "Village"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(studentTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 844, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable studentTable1;
    // End of variables declaration//GEN-END:variables

    static class StudentTableModel extends AbstractTableModel {
        private List<Student> students = null;
        private String[] columnNames = null;
        
        public StudentTableModel(String[] columnNames) {
            StudentDAO studentDAO = (StudentDAO )BeanResolverUtil.getBean("studentDAO");
            students = studentDAO.findAllStudent();
            this.columnNames = columnNames;
        }
        
        @Override
        public int getRowCount() {
            if (students != null)
                return students.size();
            else 
                return 0;
        }

        @Override
        public int getColumnCount() {
            return 4;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Student student = students.get(rowIndex);
            switch (columnIndex) {
                case 0:
                    return student.getFirstName() + " " + student.getLastName();
                case 1:
                    return student.getFatherName();
                case 2:
                    return student.getClass();
                case 3:
                    return student.getVillage();
                default:
                    return null;
            }
        }
        
        @Override
        public String getColumnName(int columnIndex) {
            return columnNames[columnIndex];
        }
    }
    
}
class StudentDataAdapter {
    public static String[][] getData() {
        StudentService studentService = (StudentService )in.ac.sbps.util.BeanResolverUtil.getBean("studentService");
        List<Student> students = studentService.findAllStudent();
        String[][] result = new String[students.size()][4];
        for (int i = 0; i < students.size(); i++) {
            Student student = students.get(i);
            result[i][0] = student.getFirstName() + " " + student.getLastName();
            result[i][1] = student.getFatherName();
            result[i][2] = student.getClass().toString();
            result[i][3] = student.getVillage();
        }
        return result;
    }
}
